"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import sys
from decouple import config as env
import logging
import logging.config
from pathlib import Path
from django.utils.translation import gettext_lazy as _

BASE_DIR = Path(__file__).resolve().parent.parent
ENVIRONMENT = env('APP_ENVIRONMENT')
VERSION = env('APP_VERSION')
SECRET_KEY = 'django-insecure-23jsu*au-5g6%=68qnxqqlsen3hvc=!h^sxw*c08lm0^-4rqq&'
DEBUG = env('DEBUG')
ALLOWED_HOSTS = ['*']
INTERNAL_IPS = []
ADMINS = []
DEBUG_PROPAGATE_EXCEPTIONS = False
TIME_ZONE = "Asia/Kolkata"
DEFAULT_DATE_FORMAT = "%b %d, %Y"
DEFAULT_TIME_FORMAT = "%I:%M %p"
DEFAULT_TIME_FORMATS = "%I:%M"
DEFAULT_DATE_TIME_FORMAT = "%b %d, %Y, %I:%M %p"
USE_TZ = True
LANGUAGE_CODE = "en-us"
LANGUAGES = [
    ("af", _("Afrikaans")),
    ("ar", _("Arabic")),
    ("ar-dz", _("Algerian Arabic")),
    ("ast", _("Asturian")),
    ("az", _("Azerbaijani")),
    ("bg", _("Bulgarian")),
    ("be", _("Belarusian")),
    ("bn", _("Bengali")),
    ("br", _("Breton")),
    ("bs", _("Bosnian")),
    ("ca", _("Catalan")),
    ("cs", _("Czech")),
    ("cy", _("Welsh")),
    ("da", _("Danish")),
    ("de", _("German")),
    ("dsb", _("Lower Sorbian")),
    ("el", _("Greek")),
    ("en", _("English")),
    ("en-au", _("Australian English")),
    ("en-gb", _("British English")),
    ("eo", _("Esperanto")),
    ("es", _("Spanish")),
    ("es-ar", _("Argentinian Spanish")),
    ("es-co", _("Colombian Spanish")),
    ("es-mx", _("Mexican Spanish")),
    ("es-ni", _("Nicaraguan Spanish")),
    ("es-ve", _("Venezuelan Spanish")),
    ("et", _("Estonian")),
    ("eu", _("Basque")),
    ("fa", _("Persian")),
    ("fi", _("Finnish")),
    ("fr", _("French")),
    ("fy", _("Frisian")),
    ("ga", _("Irish")),
    ("gd", _("Scottish Gaelic")),
    ("gl", _("Galician")),
    ("he", _("Hebrew")),
    ("hi", _("Hindi")),
    ("hr", _("Croatian")),
    ("hsb", _("Upper Sorbian")),
    ("hu", _("Hungarian")),
    ("hy", _("Armenian")),
    ("ia", _("Interlingua")),
    ("id", _("Indonesian")),
    ("ig", _("Igbo")),
    ("io", _("Ido")),
    ("is", _("Icelandic")),
    ("it", _("Italian")),
    ("ja", _("Japanese")),
    ("ka", _("Georgian")),
    ("kab", _("Kabyle")),
    ("kk", _("Kazakh")),
    ("km", _("Khmer")),
    ("kn", _("Kannada")),
    ("ko", _("Korean")),
    ("ky", _("Kyrgyz")),
    ("lb", _("Luxembourgish")),
    ("lt", _("Lithuanian")),
    ("lv", _("Latvian")),
    ("mk", _("Macedonian")),
    ("ml", _("Malayalam")),
    ("mn", _("Mongolian")),
    ("mr", _("Marathi")),
    ("ms", _("Malay")),
    ("my", _("Burmese")),
    ("nb", _("Norwegian Bokm√•l")),
    ("ne", _("Nepali")),
    ("nl", _("Dutch")),
    ("nn", _("Norwegian Nynorsk")),
    ("os", _("Ossetic")),
    ("pa", _("Punjabi")),
    ("pl", _("Polish")),
    ("pt", _("Portuguese")),
    ("pt-br", _("Brazilian Portuguese")),
    ("ro", _("Romanian")),
    ("ru", _("Russian")),
    ("sk", _("Slovak")),
    ("sl", _("Slovenian")),
    ("sq", _("Albanian")),
    ("sr", _("Serbian")),
    ("sr-latn", _("Serbian Latin")),
    ("sv", _("Swedish")),
    ("sw", _("Swahili")),
    ("ta", _("Tamil")),
    ("te", _("Telugu")),
    ("tg", _("Tajik")),
    ("th", _("Thai")),
    ("tk", _("Turkmen")),
    ("tr", _("Turkish")),
    ("tt", _("Tatar")),
    ("udm", _("Udmurt")),
    ("uk", _("Ukrainian")),
    ("ur", _("Urdu")),
    ("uz", _("Uzbek")),
    ("vi", _("Vietnamese")),
    ("zh-hans", _("Simplified Chinese")),
    ("zh-hant", _("Traditional Chinese")),
]
LANGUAGES_BIDI = ["he", "ar", "ar-dz", "fa", "ur"]
USE_I18N = True
LOCALE_PATHS = []
LANGUAGE_COOKIE_NAME = "django_language"
LANGUAGE_COOKIE_AGE = None
LANGUAGE_COOKIE_DOMAIN = None
LANGUAGE_COOKIE_PATH = "/"
LANGUAGE_COOKIE_SECURE = False
LANGUAGE_COOKIE_HTTPONLY = False
LANGUAGE_COOKIE_SAMESITE = None
USE_L10N = True
MANAGERS = ADMINS
DEFAULT_CHARSET = "utf-8"
SERVER_EMAIL = "root@localhost"
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'service_application.account_manager',
    'service_application.auth_manager',
    'service_application.common_console',
    'service_application.corporate_console',
    'service_application.customer_manager',
    'service_application.individual_console',
    'service_application.master_manager',
    'service_application.notification_manager',
    'service_application.property_manager',
    'service_application.service_manager'
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'config.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
DATABASES = {
    'default': {
            'ENGINE': env('DB_ENGINE'),
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST'),
            'PORT': env('DB_PORT'),
            'OPTIONS': {
            },
        }
}
DATABASE_ROUTERS = []
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

APP_LOGGER_FUNCTION_IN_PARAMS = env('APP_LOGGER_FUNCTION_IN_PARAMS')
APP_LOGGER_FUNCTION_OUT_PARAMS = env('APP_LOGGER_FUNCTION_OUT_PARAMS')
APP_LOGGING_LEVEL = env('APP_LOGGING_LEVEL')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        #'verbose': {'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(message)s'},
        'verbose': {'format': '%(asctime)s %(levelname)s %(message)s'},
        'simple':  {'format': '%(levelname)s %(message)s'},
    },
    'handlers': {
        'app_scripts':{
            'level':env('APP_LOGGING_LEVEL'),
            'class':'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(BASE_DIR, 'logs', 'app_scripts.log'),
            'when': 'W4',
            'interval': 1,
            'backupCount': 7
        },
        'app':{
            'level':env('APP_LOGGING_LEVEL'),
            'class':'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(BASE_DIR, 'logs', 'app.log'),
            'when': 'W4',
            'interval': 1,
            'backupCount': 7
        },
        'app_threads':{
            'level':env('APP_LOGGING_LEVEL'),
            'class':'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(BASE_DIR, 'logs', 'app_threads.log'),
            'when': 'W4',
            'interval': 1,
            'backupCount': 7
        },


    },
    'loggers': {
        'app_scripts':{'handlers':['app_scripts'],'level': env('APP_LOGGING_LEVEL'),'propagate': False,},
        'app':{'handlers':['app'],'level': env('APP_LOGGING_LEVEL'),'propagate': False,},
        'app_threads':{'handlers':['app_threads'],'level': env('APP_LOGGING_LEVEL'),'propagate': False,},

    }
}
logging.config.dictConfig(LOGGING)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = env('MEDIA_URL')
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440
DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000
FILE_UPLOAD_TEMP_DIR = None
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = None
FORMAT_MODULE_PATH = None
DATE_FORMAT = "N j, Y"
DATETIME_FORMAT = "N j, Y, P"
TIME_FORMAT = "P"
YEAR_MONTH_FORMAT = "F Y"
MONTH_DAY_FORMAT = "F j"
SHORT_DATE_FORMAT = "m/d/Y"
SHORT_DATETIME_FORMAT = "m/d/Y P"
DATE_INPUT_FORMATS = [
    "%Y-%m-%d",  # '2006-10-25'
    "%m/%d/%Y",  # '10/25/2006'
    "%m/%d/%y",  # '10/25/06'
    "%b %d %Y",  # 'Oct 25 2006'
    "%b %d, %Y",  # 'Oct 25, 2006'
    "%d %b %Y",  # '25 Oct 2006'
    "%d %b, %Y",  # '25 Oct, 2006'
    "%B %d %Y",  # 'October 25 2006'
    "%B %d, %Y",  # 'October 25, 2006'
    "%d %B %Y",  # '25 October 2006'
    "%d %B, %Y",  # '25 October, 2006'
]
TIME_INPUT_FORMATS = [
    "%H:%M:%S",  # '14:30:59'
    "%H:%M:%S.%f",  # '14:30:59.000200'
    "%H:%M",  # '14:30'
]
FIRST_DAY_OF_WEEK = 0
DECIMAL_SEPARATOR = "."
USE_THOUSAND_SEPARATOR = False
NUMBER_GROUPING = 0
THOUSAND_SEPARATOR = ","
DEFAULT_TABLESPACE = ""
DEFAULT_INDEX_TABLESPACE = ""
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
X_FRAME_OPTIONS = "DENY"
USE_X_FORWARDED_HOST = False
USE_X_FORWARDED_PORT = False
STATIC_ROOT = os.path.join(BASE_DIR, 'media','static_data')
STATIC_URL = env('STATIC_URL')
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
STATICFILES_DIRS = [
    os.path.join(STATIC_ROOT, 'css/'),
    os.path.join(STATIC_ROOT, 'js/'),
    os.path.join(STATIC_ROOT, 'images/')
]
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]
FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.MemoryFileUploadHandler",
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
SGI_APPLICATION = env('SGI_APPLICATION')
if SGI_APPLICATION == "wsgi":
    WSGI_APPLICATION = 'config.wsgi.application'
else:
    ASGI_APPLICATION = 'config.asgi.application'
ROOT_URLCONF = 'config.urls'
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_NAME = "sessionid"
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2
SESSION_COOKIE_DOMAIN = None
SESSION_COOKIE_SECURE = False
SESSION_COOKIE_PATH = "/"
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"
SESSION_SAVE_EVERY_REQUEST = False
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_FILE_PATH = None
SESSION_SERIALIZER = "django.contrib.sessions.serializers.JSONSerializer"
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    }
}
CACHE_MIDDLEWARE_KEY_PREFIX = ""
CACHE_MIDDLEWARE_SECONDS = 600
CACHE_MIDDLEWARE_ALIAS = "default"
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]
SIGNING_BACKEND = "django.core.signing.TimestampSigner"
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52
CSRF_COOKIE_DOMAIN = None
CSRF_COOKIE_PATH = "/"
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = "Lax"
CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN"
CSRF_TRUSTED_ORIGINS = []
CSRF_USE_SESSIONS = False
CSRF_FAILURE_VIEW = "django.views.csrf.csrf_failure"
MESSAGE_STORAGE = "django.contrib.messages.storage.fallback.FallbackStorage"
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissions',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PARSER_CLASSES': [
       'rest_framework.parsers.FormParser',
       'rest_framework.parsers.MultiPartParser',
   ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}